expr -> literal .
expr -> unop expr .
expr -> expr binop expr .
expr -> identifier .
expr -> identifier ( exprmulti ) .
expr -> expr [ expr ] .
expr -> [ type ] expr .
expr -> expr identifier .
expr -> new type .
expr -> del expr .
expr -> { stmtmulti : exprwhere } .
expr -> ( expr ) .

type -> void | bool | char | int .
type -> arr [ expr ] type .
type -> rec ( identypemulti ) .
type -> ptr type .
type -> identifier .

stmt -> expr .
stmt -> expr = expr .
stmt -> if expr then stmtmulti stmtelse end .
stmt -> while expr do stmtmulti end .

decl -> typ identifier : type .
decl -> var identifier : type .
decl -> fun identifier ( identypemulti ) : type exprassign .


exprwhere -> expr .
exprwhere -> expr where declmulti .

exprmulti -> expr , exprmulti .
exprmulti -> .

exprassign -> .
exprassign -> = expr .

stmtelse -> else stmtmulti .
stmtelse -> .

# must have one stmt / decl / identifier : type at the beginning
stmtmulti -> stmt ; stmtmulti .
stmtmulti -> stmt .

declmulti -> decl ; declmulti .
declmulti -> decl .

identypemulti -> identifier : type .
identypemulti -> identifier : type , identypemulti .
