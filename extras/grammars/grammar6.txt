expr -> idenexprmulti expr' .
expr -> { stmtmulti : exprwhere } expr' .
expr -> expr6 expr' .

expr' -> xior expr6 expr' .
expr' -> .

expr1 -> ( expr ) .
expr1 -> literal .

expr2 -> expr1 expr2'' .
expr2'' -> .
expr2'' -> dot identifier .
expr2'' -> [ expr ] .
expr2' -> expr2 .
expr2' -> [ type ] expr2 .
expr2' -> unop expr2 .
expr2' -> new expr2 .
expr2' -> del expr2 .

expr3 -> expr2' expr3' .
expr3' -> multdivmod expr2' expr3' .
expr3' -> .

expr4 -> expr3 expr4' .
expr4' -> plusminus expr3 expr4' .
expr4' -> .

expr5 -> expr4 expr5' .
expr5' -> cmp expr4 expr5' .
expr5' -> .

expr6 -> expr5 expr6' .
expr6' -> and expr5 expr6' .
expr6' -> .

type -> void .
type -> bool .
type -> char .
type -> int .
type -> arr [ expr ] type .
type -> rec ( identypemulti ) .
type -> ptr type .
type -> identifier .

stmt -> expr stmt' .
stmt' -> .
stmt' -> = expr .
stmt -> if expr then stmtmulti stmtelse end .
stmt -> while expr do stmtmulti end .

decl -> typ identifier : type .
decl -> var identifier : type .
decl -> fun identifier ( identypemulti ) : type exprassign .

idenexprmulti -> identifier idenexprmulti' .
idenexprmulti' -> ( exprmulti ) .
idenexprmulti' -> .

exprwhere -> expr exprwhere' .
exprwhere' -> .
exprwhere' -> where declmulti .

exprmulti -> expr exprmulti' .
exprmulti -> .
exprmulti' -> , expr exprmulti' .
exprmulti' -> .

exprassign -> .
exprassign -> = expr .

stmtelse -> else stmtmulti .
stmtelse -> .

stmtmulti -> stmt stmtmulti' .
stmtmulti' -> ; stmtmulti .
stmtmulti' -> .

declmulti -> decl declmulti' .
declmulti' -> ; declmulti .
declmulti' -> .

identypemulti -> identifier : type identypemulti' .
identypemulti' -> .
identypemulti' -> , identypemulti .
