#iterative an recursive linkedList
#prints 24 twice
{
    n=4;
    r.val=1;
    r.next=$next1;
    (@r.next).val=2;
    (@r.next).next=$next2;
    (@(@r.next).next).val=3;
    (@(@r.next).next).next=$next3;
    (@(@(@r.next).next).next).val=4;

    printint(iLink($r,n));
    println();
    printint(rLink($r,n));
    println()
    :
    0
    where
    typ R:rec(val:int,next: ptr R);
    var r:R;
    var next1:R;
    var next2:R;
    var next3:R;
    var n:int;
    fun printint(i:int):void;
    fun println():void;

    fun iLink(r:ptr R,n:int):int={
        tmp=@r;
        prod=1;
        i=0;
        while i<n do
            prod=prod*tmp.val;
            tmp=@tmp.next;
            i=i+1
        end:
        prod
        where
        var prod:int;
        var i:int;
        var tmp:R
    };

    fun rLink(r:ptr R,n:int):int={
        if n>1 then a=(@r).val*rLink((@r).next,n-1)
        else a=(@r).val end
        :a
        where var a:int
    }
}